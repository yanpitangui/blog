<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dotnet on Yan Pitangui</title><link>https://yanpitangui.com/en/tags/dotnet/</link><description>Recent content in dotnet on Yan Pitangui</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Â© Yan Pitangui</copyright><lastBuildDate>Wed, 10 May 2023 21:56:13 -0300</lastBuildDate><atom:link href="https://yanpitangui.com/en/tags/dotnet/index.xml" rel="self" type="application/rss+xml"/><item><title>Starting a .NET api quickly with a boilerplate</title><link>https://yanpitangui.com/en/posts/2023/05/starting-a-.net-api-quickly-with-a-boilerplate/</link><pubDate>Wed, 10 May 2023 21:56:13 -0300</pubDate><guid>https://yanpitangui.com/en/posts/2023/05/starting-a-.net-api-quickly-with-a-boilerplate/</guid><description>What is an API boilerplate? An API boilerplate is a pre-built template that provides a basic structure and set of functionalities for creating a web API. It includes essential components such as routing, database integration, error handling, and security features that are commonly required in most API projects.
Why should you care about it? Using an API boilerplate can significantly speed up the initial development process for several reasons:
Provides a Structured and Consistent Framework: An API boilerplate offers a clear and structured framework to start from, ensuring that the codebase remains organized and consistent.</description></item></channel></rss>