<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ef on Yan Pitangui</title><link>https://yanpitangui.com/pt/tags/ef/</link><description>Recent content in ef on Yan Pitangui</description><generator>Hugo -- gohugo.io</generator><language>pt</language><copyright>© Yan Pitangui</copyright><lastBuildDate>Thu, 15 Jun 2023 00:52:58 -0300</lastBuildDate><atom:link href="https://yanpitangui.com/pt/tags/ef/index.xml" rel="self" type="application/rss+xml"/><item><title>Detectando se a aplicação está rodando para criar migrations</title><link>https://yanpitangui.com/pt/posts/2023/06/detectando-se-a-aplica%C3%A7%C3%A3o-est%C3%A1-rodando-para-criar-migrations/</link><pubDate>Thu, 15 Jun 2023 00:52:58 -0300</pubDate><guid>https://yanpitangui.com/pt/posts/2023/06/detectando-se-a-aplica%C3%A7%C3%A3o-est%C3%A1-rodando-para-criar-migrations/</guid><description>Problema: Seu DbContext tem uma dependência scoped Tendo uma dependência scoped, como por exemplo numa aplicação multi tenant, onde injeta algum serviço scoped, como TenantProvider ou algo do tipo, você ficará impossibilitado(a) de criar migrations, pois a aplicação não conseguirá resolver essa dependência. Mas eu tenho a solução!
Veja a classe a seguir como exemplo:
public class Session: ISession { public Session(IHttpContextAccessor httpContextAccessor) {...} } Solução Uma coisa que pode ser feita é adicionar mais um construtor, onde você adiciona manualmente as dependências, como a seguir:</description></item></channel></rss>